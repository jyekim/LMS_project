<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="kr.happyjob.study.std.dao.MyTestInfoDao">

	<!-- 나의 시험응시 목록 조회 -->
	<select id="myTestList" resultType="kr.happyjob.study.std.model.MyTestInfoVo">
		/*kr.happyjob.study.adv.dao.MyTestInfoDao.myTestList*/
		select  lec.lec_id
              , lec.lec_name
              , tut.loginID as tut_id
              , tut.name as tut_name
              , lec.test_id
              , tm.test_name
              , lec.test_start
              , lec.test_end
              , ls.test_yn
              , tu.pass
              , tu.test_score
              , tu.test_date
		from  tb_lecstd_info ls
 		 	join tb_lec_info lec on ls.lec_id = lec.lec_id
 		 	join tb_userinfo tut on lec.tutor_id = tut.loginID
 		 	join tb_testmaster tm on tm.test_id = lec.test_id
			<if test="(loginID != null) and (!loginID.equals(''))">
		    	left join tb_test_user tu on tu.lec_id = ls.lec_id and tu.std_id= #{loginID}
			</if>
		<where>
 	    	<if test="(loginID != null) and (!loginID.equals(''))">
		    	and ls.std_id = #{loginID}
			</if>
			<if test="(searchKey != null) and (!searchKey.equals(''))">
				<choose>
					<when test="(searchKey != null) and (searchKey eq 'ProceedingTest'.toString())">
						AND DATE_FORMAT(NOW(), '%Y.%m.%d') <![CDATA[>=]]>DATE_FORMAT( lec.test_start, '%Y.%m.%d')
						AND DATE_FORMAT(NOW(), '%Y.%m.%d') <![CDATA[<=]]>DATE_FORMAT( lec.test_end, '%Y.%m.%d')
					</when>
					<when test="(searchKey != null) and (searchKey eq 'LastTest'.toString())">
						AND  DATE_FORMAT(NOW(), '%Y.%m.%d') <![CDATA[>]]> DATE_FORMAT( lec.test_end, '%Y.%m.%d')
					</when>
				</choose>
			</if>
		</where>  
		ORDER BY lec.lec_id DESC
		<if test="(startPos != null) and (!startPos.equals('')) and (pageSize != null) and (!pageSize.equals(''))">
		LIMIT #{startPos}, #{pageSize}
		</if>
	</select><!-- end 나의 시험응시 목록 조회 -->
	
	<!-- 나의 시험응시 목록 총 갯수 조회 -->
	<select id="myTestListCnt" resultType="int">
		/*kr.happyjob.study.std.dao.MyTestInfoDao.myTestListCnt*/
		select count(*)
		from tb_lecstd_info ls
			join tb_lec_info lec on ls.lec_id = lec.lec_id
		<where>
 	    	<if test="(loginID != null) and (!loginID.equals(''))">
		    	and ls.std_id = #{loginID}
			</if>
			<if test="(searchKey != null) and (!searchKey.equals(''))">
				<choose>
					<when test="(searchKey != null) and (searchKey eq 'ProceedingTest'.toString())">
						AND DATE_FORMAT(NOW(), '%Y.%m.%d') <![CDATA[>=]]>DATE_FORMAT( lec.test_start, '%Y.%m.%d')
						AND DATE_FORMAT(NOW(), '%Y.%m.%d') <![CDATA[<=]]>DATE_FORMAT( lec.test_end, '%Y.%m.%d')
					</when>
					<when test="(searchKey != null) and (searchKey eq 'LastTest'.toString())">
						AND  DATE_FORMAT(NOW(), '%Y.%m.%d') <![CDATA[>]]> DATE_FORMAT( lec.test_end, '%Y.%m.%d')
					</when>
				</choose>
			</if>
		</where>  	      		      
	</select><!-- end 나의 수강목록 총 갯수 조회 -->
	
	<!-- 시험문제 항목 조회 -->
	<select id="testItemList" resultType="kr.happyjob.study.std.model.TestDetailVo">	      
		select td.test_id
		     , tm.test_name as test_name
		     , tm.cnt
		     , tm.lec_type_id
		     , lt.lec_type_name
		     , td.test_num
		     , td.que_id
		     , td.que_id
		     , tq.test_que
		     , tq.que_ans
		     , tq.que_ex1
		     , tq.que_ex2
		     , tq.que_ex3
		     , tq.que_ex4         
		from tb_test_detail td            
            join tb_testmaster tm on tm.test_id = #{test_id}         
        	join tb_lec_type lt on tm.lec_type_id=lt.lec_type_id
        	join tb_test_que tq on td.que_id = tq.que_id and tq.use_yn = 'y'                		
		where td.test_id = #{test_id}
    	ORDER BY td.test_num    	
	</select><!-- end 시험문제 항목 조회 -->
	
	<!-- 시험문제 항목 총 갯수 조회 -->
	<select id="testItemListCnt" resultType="int">
		/*kr.happyjob.study.std.dao.MyTestInfoDao.testItemListCnt*/
		select count(*)
		from tb_test_detail td
        	join tb_test_que tq on td.que_id = tq.que_id and tq.use_yn = 'y' 
		where td.test_id = #{test_id};	      		      
	</select><!-- end 시험문제 항목 총 갯수 조회 -->	
	
	
	
	
	
	
	
	<select id="noticelist" resultType="kr.happyjob.study.notice.model.Noticevo">
		/*kr.happyjob.study.notice.dao.NoticeDao.noticelist*/
		select an.notice_id
			  , ui.loginID 
		      , ui.name
		      , an.notice_tit
		      , DATE_FORMAT(an.regdate, '%y-%m-%d') as regdate
		      , an.hit
		from tb_adm_notice an 
		      join tb_userinfo ui on ui.loginID = an.loginID
	    <where>
	    
	    	<if test="(sname != null) and (!sname.equals(''))">
		    	and an.notice_tit Like CONCAT('%', #{searchtitle}, '%')
			</if>
	    	<if test="(sname != null) and (!sname.equals(''))">
		    	and an.regdate <![CDATA[ >= ]]> STR_TO_DATE(#{searchstdate}, '%Y-%m-%d')
			</if>
	    	<if test="(sname != null) and (!sname.equals(''))">
		    	and an.regdate <![CDATA[ <= ]]> STR_TO_DATE(#{searcheddate}, '%Y-%m-%d')
			</if>
			
	    </where>

		ORDER BY an.regdate DESC
		LIMIT #{startpos}, #{pagesize}

	</select><!-- end 목록 조회 -->
	
	<!-- 총 갯수 조회 -->
	<select id="noticecnt" resultType="int">
		/*kr.happyjob.study.notice.dao.NoticeDao.noticecnt*/
		select count(*)
		from tb_adm_notice an 
		      join tb_userinfo ui on ui.loginID = an.loginID
	    <where>
	    
	    	<if test="(sname != null) and (!sname.equals(''))">
		    	and an.notice_tit Like CONCAT('%', #{searchtitle}, '%')
			</if>
	    	<if test="(sname != null) and (!sname.equals(''))">
		    	and an.regdate <![CDATA[ >= ]]> STR_TO_DATE(#{searchstdate}, '%Y-%m-%d')
			</if>
	    	<if test="(sname != null) and (!sname.equals(''))">
		    	and an.regdate <![CDATA[ <= ]]> STR_TO_DATE(#{searcheddate}, '%Y-%m-%d')
			</if>
			
	    </where>
			
	</select>
	
	<!-- 파일 x 신규 공지 등록 -->
	<!--
		notice_id 공지사항 번호는 max + 1
		login_id 는 세션에서 로그인 한 사람을 기준으로 가져와서 insert
	 -->
	<insert id="noticesave">
		/*kr.happyjob.study.notice.dao.NoticeDao.noticesave*/
		<selectKey resultType="int" keyProperty="notice_id" order="BEFORE">
			select IFNULL(max(notice_id),0)+1
			from tb_adm_notice
		</selectKey>
		insert into tb_adm_notice 
					(	notice_id		
						, loginID		
						, notice_tit	
						, notice_con	
						, regdate		
						, hit	
					) values (
						#{notice_id}		
						, #{loginID}
						, #{ititle}	
						, #{icontent}	
						, now()		
						, 0
					)
	</insert>

	<!-- 파일 x 공지 수정 -->	
	<update id="noticeupdate">
		/*kr.happyjob.study.notice.dao.NoticeDao.noticeupdate*/
		update tb_adm_notice
		set notice_tit = #{ititle}	, notice_con = #{icontent}
		where notice_id = #{notice_id}
	</update>

	<!-- 조회시 조회수 +1 -->
		<update id="noticehitupdate">
		/*kr.happyjob.study.notice.dao.NoticeDao.noticehitupdate*/
		update tb_adm_notice
		set hit = hit +1
		where notice_id = #{notice_id}
	</update>
	
	<!-- 상세조회 -->
	<select id="noticedtl" resultType="kr.happyjob.study.notice.model.Noticevo">
		/*kr.happyjob.study.notice.dao.NoticeDao.noticedtl*/
		select an.notice_id
			  , ui.loginID 
		      , ui.name
		      , an.notice_tit
		      , an.notice_con
		      , DATE_FORMAT(an.regdate, '%y-%m-%d') as regdate
		      , an.hit
		from tb_adm_notice an 
		      join tb_userinfo ui on ui.loginID = an.loginID
	    where an.notice_id = #{notice_id}
	</select><!-- end 상세조회-->
	
	<!-- 공지 삭제 -->
	<delete id="noticedelete">
		delete
		from tb_adm_notice
		where notice_id = #{notice_id}
	</delete>
	
</mapper>