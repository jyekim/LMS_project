<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="kr.happyjob.study.adv.dao.AdviceDao">

	<!-- 강의 목록 조회 -->
	<select id="lecList" resultType="kr.happyjob.study.adv.model.LecInfoVo">
		/*kr.happyjob.study.adv.dao.AdviceDao.lecList*/
		select  lec_id
              , lec_name
              , DATE_FORMAT(start_date, '%Y%m%d') as start_date
              , DATE_FORMAT(end_date, '%Y%m%d') as end_date    
		from  tb_lec_info
        <where>
	    	<if test="(tutor_id != null) and (!tutor_id.equals(''))">
		    	and tutor_id=#{tutor_id}
			</if>
		</where>		
	</select><!-- end 강의 목록 조회 -->
	
	<!-- 강의 목록 총 갯수 조회 -->
	<select id="lecListCnt" resultType="int">
		/*kr.happyjob.study.adv.dao.AdviceDao.lecListCnt*/
		select count(*)
		from tb_lec_info li		      		      
        <where>
	    	<if test="(searchLecName != null) and (!searchLecName.equals(''))">
		    	and li.lec_name Like CONCAT('%', #{searchLecName}, '%')
			</if>
		</where>			
	</select><!-- end 강의 목록 총 갯수 조회 -->
	
	<!-- 상담 목록 조회 -->
	<select id="advList" resultType="kr.happyjob.study.adv.model.AdviceVo">
		/*kr.happyjob.study.adv.dao.AdviceDao.advList*/
		select  ad.adv_id
       		  , ad.lec_id
       		  , li.lec_name as lec_name
              , ad.std_id
              , std.name as std_name
              , ad.tut_id
              , tut.name as tut_name
              , ad.adv_place
              , DATE_FORMAT(ad.adv_date, '%Y.%m.%d') as adv_date
		from  tb_adv ad
			  join tb_userinfo std on ad.std_id = std.loginID
			  join tb_userinfo tut on ad.tut_id = tut.loginID			  
			  join tb_lec_info li on ad.lec_id = li.lec_id
		<where>
 	    	<if test="(lec_id != null) and (!lec_id.equals(''))">
		    	and ad.lec_id = #{lec_id}
			</if>
		</where>   
		ORDER BY adv_id DESC
		<if test="(startPos != null) and (!startPos.equals('')) and (pageSize != null) and (!pageSize.equals(''))">
		LIMIT #{startPos}, #{pageSize}
		</if>
	</select><!-- end 상담 목록 조회 -->
	
	<!-- 상담 목록 총 갯수 조회 -->
	<select id="advListCnt" resultType="int">
		/*kr.happyjob.study.adv.dao.AdviceDao.advListCnt*/
		select count(*)
		from tb_adv ad		      		      
        <where>
        	<if test="(lec_id != null) and (!lec_id.equals(''))">
		    	and ad.lec_id = #{lec_id}
			</if>
	    	<!-- <if test="(searchLecName != null) and (!searchLecName.equals(''))">
		    	and li.lec_name Like CONCAT('%', #{searchLecName}, '%')
			</if> -->
		</where>			
	</select><!-- end 상담 목록 총 갯수 조회 -->
	
	<!-- 상담 상세보기 -->
	<select id="advDetail" resultType="kr.happyjob.study.adv.model.AdviceVo">
		/*kr.happyjob.study.adv.dao.AdviceDao.advDetail*/
		select  ad.adv_id
       		  , ad.lec_id
       		  , li.lec_name as lec_name
              , ad.std_id
              , std.name as std_name
              , ad.tut_id
              , tut.name as tut_name
              , ad.adv_place
              , ad.adv_content
              , ad.adv_date
              , DATE_FORMAT(ad.mod_date, '%Y.%m.%d %H:%i') as mod_date
		from  tb_adv ad
			  join tb_userinfo std on ad.std_id = std.loginID
			  join tb_userinfo tut on ad.tut_id = tut.loginID			  
			  join tb_lec_info li on ad.lec_id = li.lec_id
		<where>
 	    	<if test="(adv_id != null) and (!adv_id.equals(''))">
		    	and ad.adv_id = #{adv_id}
			</if>
		</where>		
	</select><!-- end 상담 상세보기 -->
	
	<!-- 강의 수강 학생 목록 조회 -->
	<select id="lecStdList" resultType="kr.happyjob.study.adv.model.LecStdInfoVo">
		/*kr.happyjob.study.adv.dao.AdviceDao.lecStdList*/
		select  ls.lec_id
              , ls.std_id
              , u.name as std_name                  
		from  tb_lecstd_info ls
			inner join tb_userinfo u on ls.std_id=u.loginID
        <where>
	    	<if test="(lec_id != null) and (!lec_id.equals(''))">
		    	and lec_id = #{lec_id}
			</if>
		</where>		
	</select><!-- end 강의 수강 학생 목록 조회 -->
	
	<!-- 강의 수강 학생 목록 총 갯수 조회 -->
	<select id="lecStdListCnt" resultType="int">
		/*kr.happyjob.study.adv.dao.AdviceDao.lecStdListCnt*/
		select count(*)
		from tb_lecstd_info
        <where>
        	<if test="(lec_id != null) and (!lec_id.equals(''))">
		    	and lec_id = #{lec_id}
			</if>
		</where>			
	</select><!-- end 강의 수강 학생 목록 총 갯수 조회 -->
	
	<!-- 상담 등록 -->
	<insert id="advRegister">	
		insert into tb_adv 
					(	lec_id		
						, std_id		
						, tut_id	
						, adv_place	
						, adv_content	
						, adv_date
						, mod_date	
					) values (
						#{lec_id}		
						, #{std_id}
						, #{tut_id}	
						, #{adv_place}	
						, #{adv_content}
						, #{adv_date}
						, now()
					)
	</insert><!-- end 상담 등록 -->

	<!-- 상담 수정 -->	
	<update id="advUpdate">
		update tb_adv
		   set adv_place = #{adv_place}
		   	 , adv_content = #{adv_content}
 	 		 , adv_date = #{adv_date}
 	 		 , mod_date = now()
		where adv_id = #{adv_id}
	</update><!-- end 상담 수정 -->
	
	<!-- 상담 삭제 -->
	<update id="advDelete">
		delete from tb_adv where adv_id = #{adv_id}
	</update><!-- end 상담 삭제 -->
		
	
	<select id="noticelist" resultType="kr.happyjob.study.notice.model.Noticevo">
		/*kr.happyjob.study.notice.dao.NoticeDao.noticelist*/
		select an.notice_id
			  , ui.loginID 
		      , ui.name
		      , an.notice_tit
		      , DATE_FORMAT(an.regdate, '%y-%m-%d') as regdate
		      , an.hit
		from tb_adm_notice an 
		      join tb_userinfo ui on ui.loginID = an.loginID
	    <where>
	    
	    	<if test="(sname != null) and (!sname.equals(''))">
		    	and an.notice_tit Like CONCAT('%', #{searchtitle}, '%')
			</if>
	    	<if test="(sname != null) and (!sname.equals(''))">
		    	and an.regdate <![CDATA[ >= ]]> STR_TO_DATE(#{searchstdate}, '%Y-%m-%d')
			</if>
	    	<if test="(sname != null) and (!sname.equals(''))">
		    	and an.regdate <![CDATA[ <= ]]> STR_TO_DATE(#{searcheddate}, '%Y-%m-%d')
			</if>
			
	    </where>

		ORDER BY an.regdate DESC
		LIMIT #{startpos}, #{pagesize}

	</select><!-- end 목록 조회 -->
	
	<!-- 총 갯수 조회 -->
	<select id="noticecnt" resultType="int">
		/*kr.happyjob.study.notice.dao.NoticeDao.noticecnt*/
		select count(*)
		from tb_adm_notice an 
		      join tb_userinfo ui on ui.loginID = an.loginID
	    <where>
	    
	    	<if test="(sname != null) and (!sname.equals(''))">
		    	and an.notice_tit Like CONCAT('%', #{searchtitle}, '%')
			</if>
	    	<if test="(sname != null) and (!sname.equals(''))">
		    	and an.regdate <![CDATA[ >= ]]> STR_TO_DATE(#{searchstdate}, '%Y-%m-%d')
			</if>
	    	<if test="(sname != null) and (!sname.equals(''))">
		    	and an.regdate <![CDATA[ <= ]]> STR_TO_DATE(#{searcheddate}, '%Y-%m-%d')
			</if>
			
	    </where>
			
	</select>
	
	<!-- 파일 x 신규 공지 등록 -->
	<!--
		notice_id 공지사항 번호는 max + 1
		login_id 는 세션에서 로그인 한 사람을 기준으로 가져와서 insert
	 -->
	<insert id="noticesave">
		/*kr.happyjob.study.notice.dao.NoticeDao.noticesave*/
		<selectKey resultType="int" keyProperty="notice_id" order="BEFORE">
			select IFNULL(max(notice_id),0)+1
			from tb_adm_notice
		</selectKey>
		insert into tb_adm_notice 
					(	notice_id		
						, loginID		
						, notice_tit	
						, notice_con	
						, regdate		
						, hit	
					) values (
						#{notice_id}		
						, #{loginID}
						, #{ititle}	
						, #{icontent}	
						, now()		
						, 0
					)
	</insert>

	<!-- 파일 x 공지 수정 -->	
	<update id="noticeupdate">
		/*kr.happyjob.study.notice.dao.NoticeDao.noticeupdate*/
		update tb_adm_notice
		set notice_tit = #{ititle}	, notice_con = #{icontent}
		where notice_id = #{notice_id}
	</update>

	<!-- 조회시 조회수 +1 -->
		<update id="noticehitupdate">
		/*kr.happyjob.study.notice.dao.NoticeDao.noticehitupdate*/
		update tb_adm_notice
		set hit = hit +1
		where notice_id = #{notice_id}
	</update>
	
	<!-- 상세조회 -->
	<select id="noticedtl" resultType="kr.happyjob.study.notice.model.Noticevo">
		/*kr.happyjob.study.notice.dao.NoticeDao.noticedtl*/
		select an.notice_id
			  , ui.loginID 
		      , ui.name
		      , an.notice_tit
		      , an.notice_con
		      , DATE_FORMAT(an.regdate, '%y-%m-%d') as regdate
		      , an.hit
		from tb_adm_notice an 
		      join tb_userinfo ui on ui.loginID = an.loginID
	    where an.notice_id = #{notice_id}
	</select><!-- end 상세조회-->
	
	<!-- 공지 삭제 -->
	<delete id="noticedelete">
		delete
		from tb_adm_notice
		where notice_id = #{notice_id}
	</delete>
	
</mapper>